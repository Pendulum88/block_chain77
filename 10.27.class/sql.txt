USE testing1;

CREATE SCHEMA `testing1` DEFAULT CHARACTER SET utf8mb4 ;

CREATE TABLE `testing`.`new_table` (
    `idx` INT NOT NULL,
    `new_tablecol` VARCHAR(45) NULL,
    PRIMARY KEY (`idx`));

----------------------------------------------------------------
 
CREATE : 생성하는 명령어
- DB, TABLE

DEFAULT CHARACTER SET utf8mb4
- utf8mb4 방식으로 인코딩한다 << 저장할때의 방식이다
- txt 파일 만들때 선택하는 인코딩과 같다

`testing`.`new_table`
- `DB명`.`생성할 테이블명
`
(
    `idx` INT NOT NULL,
    `new_tablecol` VARCHAR(45) NULL,
    PRIMARY KEY (`idx`));
- (`컬럼명` 자료형옵션, `컬럼명` 자료형옵션, 옵션)
- idx 컬럼명을 INT 자료형을 사용하여 생성하되 idx는 빈값이면 안된다
new_tablecol 컬럼명을 VARCHAR(45) 자료형을 사용하여 생성하고 빈값이 들어가도 상관없다
PRIMARY KEY(고유식별컬럼, 값?)으로 idx를 설정한다

자료형(간단)
- BOOLEAN : 참거짓, 1 BYTE

자료형(숫자)
- TINYINT : 1 BYTE의 정수 -128 ~ 127 , 0 ~ 255
  - 잡설 : 127 + 1 => -128 
- INT : 4 BYTE의 정수 -2,147,483,648 ~ 2,147,483,647
- BIGINT : 8 BYTE의 정수
- FLOAT : 4 BYTE의 실수
  - 계산할 떄 확률적으로 오류가 뜬다
- DOUBLE : 8 BYTE의 실수
  - FLOAT보다는 조금 덜 오류가 뜬다
- BIT(n) : n BIT의 정수 << 직접 설정한다
  - BIT(4) = 0 ~ 15 (2의 4승 - 1 -> 빼기 1은 0부터라서)

자료형(문자)
- CHAR(n) : n BYTE의 문자 단, 최대 2의8승 BYTE 까지만 가능
- VARCHAR(n) : 최대 n BYTE의 가변 문자, 최대 2의8승 BYTE
  - ASCII : 1 BYTE (8 BIT) << 최대글자수는 2의8승 BYTE << 0 ~ 126 2^7 - 1 << 7 BIT << 앞에 1BIT를 버리고 총 8 BIT 사용
  - UTF8 : 1 ~ 3 BYTE << 최대글자수는 2의8승나누기3 ~ 2의8승
  - UTF8mb4 : 1 ~ 4 BYTE
  - UTF16 : 3 BYTE
- TEXT : 최대 2^16 BYTE의 가변 문자
- LONGTEXT : 최대 2^32 BYTE의 가변 문자

자료형(시간)
- DATE : 3 BYTE의 날짜 => YYYY-MM-DD
- DATETIME : 8 BYTE의 날짜 + 시간 => YYYY-MM-DD HH:MM:SS
- TIMESTAMP : 4 BYTE의 UTC 시간의 날짜 + 시간 => YYYY-MM-DD HH:MM:SS
- YEAR : 1 BYTE의 년도 => YYYY

옵션
- NOT NULL : 비면 안된다
- UNIQUE : 값이 중복되면 안된다
- PRIMARY KEY : 고유 식별 키
- FORIGN KEY : 테이블 연결시 사용
- CHECK : 저장할 데이터의 범위나 조건을 지정한다
- DEFAULT : 기본값
- AUTO_INCREMENT : index값 자동 증가
- COMMENT : 설명

----------------------------------------------------------------

SELECT * FROM testing.new_table;

INSERT INTO `testing`.`new_table`
(`idx`, `name`, `password`, `id`, `create_at`)
VALUESnew_table
('1', '경훈123', 'asdasasdd', 'qweqqwew7e', '2022-02-10');

INSERT INTO `testing`.`new_table`
(`idx`, `name`, `password`, `id`, `create_at`)
VALUES
('0', '경훈123', 'asdasasdd', 'qweqqwew7e', '2022-02-10');

----------------------------------------------------------------

USE testing1 : testing1 DB를 사용한다 (접속한다/기준으로 설정한다)
SELECT : 데이터를 가져온다
* : 전부
FROM : 어디서 가져올지

SELECT * FROM testing.new_table1 WHERE 조건
SELECT * FROM testing.new_table1 WHERE name='어쩌구';
SELECT * FROM testing.new_table1 WHERE name LIKE '어쩌구';
name에 '어쩌구'가 포함되어있으면

SELECT name, id FROM testing.new_table1 WHERE name LIKE '어쩌구';
name에 '어쩌구'가 포함되어있으면 name을 가져온다

SELECT * FROM testing.new_table1 ORDER BY name DESC;
DESC : name을 기준으로 내림차순으로 가져온다
ASC : 오름차순

SELECT COUNT FROM testing.new_table1;
개수 가져오기

INSERT 
- 데이터를 저장한다
- INTO : 어디에?
- (`어쩌구`) : 컬럼명
- 